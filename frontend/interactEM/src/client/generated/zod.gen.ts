// This file is auto-generated by @hey-api/openapi-ts

import { z } from "zod"

export const zAgentCreateEvent = z.object({
  machine: z.enum(["dtn01", "dtns", "perlmutter"]),
  duration: z.string(),
  compute_type: z.enum(["gpu", "cpu"]),
  num_agents: z.number().int(),
  reservation: z.union([z.string(), z.null()]).optional(),
})

export const zBodyLoginLoginAccessToken = z.object({
  grant_type: z.union([z.string().regex(/password/), z.null()]).optional(),
  username: z.string(),
  password: z.string(),
  scope: z.string().optional().default(""),
  client_id: z.union([z.string(), z.null()]).optional(),
  client_secret: z.union([z.string(), z.null()]).optional(),
})

export const zComputeType = z.enum(["gpu", "cpu"])

export const zHttpValidationError = z.object({
  detail: z
    .array(
      z.object({
        loc: z.array(z.unknown()),
        msg: z.string(),
        type: z.string(),
      }),
    )
    .optional(),
})

export const zMessage = z.object({
  message: z.string(),
})

export const zNewPassword = z.object({
  token: z.string(),
  new_password: z.string().min(8).max(40),
})

export const zOperator = z.object({
  id: z.string().uuid(),
  label: z.string(),
  description: z.string(),
  image: z.string(),
  inputs: z
    .array(
      z.object({
        label: z.string(),
        description: z.string(),
      }),
    )
    .optional(),
  outputs: z
    .union([
      z.array(
        z.object({
          label: z.string(),
          description: z.string(),
        }),
      ),
      z.null(),
    ])
    .optional(),
  parameters: z
    .union([
      z.array(
        z.object({
          name: z.string(),
          label: z.string(),
          description: z.string(),
          type: z.enum(["str", "int", "float", "bool", "mount", "str-enum"]),
          default: z.string(),
          required: z.boolean(),
          value: z.union([z.string(), z.null()]).optional(),
          options: z.union([z.array(z.string()), z.null()]).optional(),
        }),
      ),
      z.null(),
    ])
    .optional(),
})

export const zOperatorInput = z.object({
  label: z.string(),
  description: z.string(),
})

export const zOperatorOutput = z.object({
  label: z.string(),
  description: z.string(),
})

export const zOperatorParameter = z.object({
  name: z.string(),
  label: z.string(),
  description: z.string(),
  type: z.enum(["str", "int", "float", "bool", "mount", "str-enum"]),
  default: z.string(),
  required: z.boolean(),
  value: z.union([z.string(), z.null()]).optional(),
  options: z.union([z.array(z.string()), z.null()]).optional(),
})

export const zOperators = z.object({
  data: z.array(zOperator),
})

export const zParameterType = z.enum([
  "str",
  "int",
  "float",
  "bool",
  "mount",
  "str-enum",
])

export const zPipelineCreate = z.object({
  data: z.object({}),
})

export const zPipelinePublic = z.object({
  data: z.object({}),
  running: z.boolean().optional().default(false),
  id: z.string().uuid(),
  owner_id: z.string().uuid(),
})

export const zPipelinesPublic = z.object({
  data: z.array(zPipelinePublic),
  count: z.number().int(),
})

export const zPublicHost = z.enum(["dtn01", "dtns", "perlmutter"])

export const zToken = z.object({
  access_token: z.string(),
  token_type: z.string().optional().default("bearer"),
  nats_jwt: z.string(),
})

export const zUpdatePassword = z.object({
  current_password: z.string().min(8).max(40),
  new_password: z.string().min(8).max(40),
})

export const zUserCreate = z.object({
  email: z.string().email().max(255),
  is_active: z.boolean().optional().default(true),
  is_superuser: z.boolean().optional().default(false),
  is_external: z.boolean().optional().default(false),
  full_name: z.union([z.string().max(255), z.null()]).optional(),
  password: z.string().min(8).max(40),
})

export const zUserPublic = z.object({
  email: z.string().email().max(255),
  is_active: z.boolean().optional().default(true),
  is_superuser: z.boolean().optional().default(false),
  is_external: z.boolean().optional().default(false),
  full_name: z.union([z.string().max(255), z.null()]).optional(),
  id: z.string().uuid(),
})

export const zUserRegister = z.object({
  email: z.string().email().max(255),
  password: z.string().min(8).max(40),
  full_name: z.union([z.string().max(255), z.null()]).optional(),
})

export const zUserUpdate = z.object({
  email: z.union([z.string().email().max(255), z.null()]).optional(),
  is_active: z.boolean().optional().default(true),
  is_superuser: z.boolean().optional().default(false),
  is_external: z.boolean().optional().default(false),
  full_name: z.union([z.string().max(255), z.null()]).optional(),
  password: z.union([z.string().min(8).max(40), z.null()]).optional(),
})

export const zUserUpdateMe = z.object({
  full_name: z.union([z.string().max(255), z.null()]).optional(),
  email: z.union([z.string().email().max(255), z.null()]).optional(),
})

export const zUsersPublic = z.object({
  data: z.array(zUserPublic),
  count: z.number().int(),
})

export const zValidationError = z.object({
  loc: z.array(z.unknown()),
  msg: z.string(),
  type: z.string(),
})

export const zLoginLoginAccessTokenResponse = zToken

export const zLoginLoginWithExternalTokenResponse = zToken

export const zLoginTestTokenResponse = zUserPublic

export const zLoginRecoverPasswordResponse = zMessage

export const zLoginResetPasswordResponse = zMessage

export const zLoginRecoverPasswordHtmlContentResponse = z.string()

export const zUsersReadUsersResponse = zUsersPublic

export const zUsersCreateUserResponse = zUserPublic

export const zUsersDeleteUserMeResponse = zMessage

export const zUsersReadUserMeResponse = zUserPublic

export const zUsersUpdateUserMeResponse = zUserPublic

export const zUsersUpdatePasswordMeResponse = zMessage

export const zUsersRegisterUserResponse = zUserPublic

export const zUsersDeleteUserResponse = zMessage

export const zUsersReadUserByIdResponse = zUserPublic

export const zUsersUpdateUserResponse = zUserPublic

export const zUtilsTestEmailResponse = zMessage

export const zPipelinesReadPipelinesResponse = zPipelinesPublic

export const zPipelinesCreatePipelineResponse = zPipelinePublic

export const zPipelinesDeletePipelineResponse = zMessage

export const zPipelinesReadPipelineResponse = zPipelinePublic

export const zPipelinesCreateAndRunPipelineResponse = zPipelinePublic

export const zPipelinesRunPipelineResponse = zPipelinePublic

export const zOperatorsReadOperatorsResponse = zOperators
