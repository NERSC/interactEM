// This file is auto-generated by @hey-api/openapi-ts

import type { Options } from "@hey-api/client-axios"
import { queryOptions, type UseMutationOptions } from "@tanstack/react-query"
import type {
  LoginAccessTokenData,
  LoginAccessTokenError,
  LoginAccessTokenResponse,
  TestTokenError,
  TestTokenResponse,
  RecoverPasswordData,
  RecoverPasswordError,
  RecoverPasswordResponse,
  ResetPasswordData,
  ResetPasswordError,
  ResetPasswordResponse,
  RecoverPasswordHtmlContentData,
  RecoverPasswordHtmlContentError,
  RecoverPasswordHtmlContentResponse,
  ReadUsersData,
  CreateUserData,
  CreateUserError,
  CreateUserResponse,
  DeleteUserMeError,
  DeleteUserMeResponse,
  UpdateUserMeData,
  UpdateUserMeError,
  UpdateUserMeResponse,
  UpdatePasswordMeData,
  UpdatePasswordMeError,
  UpdatePasswordMeResponse,
  RegisterUserData,
  RegisterUserError,
  RegisterUserResponse,
  ReadUserByIdData,
  UpdateUserData,
  UpdateUserError,
  UpdateUserResponse,
  DeleteUserData,
  DeleteUserError,
  DeleteUserResponse,
  TestEmailData,
  TestEmailError,
  TestEmailResponse,
  ReadPipelinesData,
  CreatePipelineData,
  CreatePipelineError,
  CreatePipelineResponse,
  ReadPipelineData,
  DeletePipelineData,
  DeletePipelineError,
  DeletePipelineResponse,
  RunPipelineData,
  RunPipelineError,
  RunPipelineResponse,
} from "../types.gen"
import type { AxiosError } from "axios"
import {
  client,
  loginAccessToken,
  testToken,
  recoverPassword,
  resetPassword,
  recoverPasswordHtmlContent,
  readUsers,
  createUser,
  readUserMe,
  deleteUserMe,
  updateUserMe,
  updatePasswordMe,
  registerUser,
  readUserById,
  updateUser,
  deleteUser,
  testEmail,
  readPipelines,
  createPipeline,
  readPipeline,
  deletePipeline,
  runPipeline,
  readOperators,
} from "../services.gen"

type QueryKey<TOptions extends Options> = [
  Pick<TOptions, "baseURL" | "body" | "headers" | "path" | "query"> & {
    _id: string
    _infinite?: boolean
  },
]

const createQueryKey = <TOptions extends Options>(
  id: string,
  options?: TOptions,
  infinite?: boolean,
): QueryKey<TOptions>[0] => {
  const params: QueryKey<TOptions>[0] = {
    _id: id,
    baseURL: (options?.client ?? client).getConfig().baseURL,
  } as QueryKey<TOptions>[0]
  if (infinite) {
    params._infinite = infinite
  }
  if (options?.body) {
    params.body = options.body
  }
  if (options?.headers) {
    params.headers = options.headers
  }
  if (options?.path) {
    params.path = options.path
  }
  if (options?.query) {
    params.query = options.query
  }
  return params
}

export const loginAccessTokenQueryKey = (
  options: Options<LoginAccessTokenData>,
) => [createQueryKey("loginAccessToken", options)]

export const loginAccessTokenOptions = (
  options: Options<LoginAccessTokenData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await loginAccessToken({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: loginAccessTokenQueryKey(options),
  })
}

export const loginAccessTokenMutation = (
  options?: Partial<Options<LoginAccessTokenData>>,
) => {
  const mutationOptions: UseMutationOptions<
    LoginAccessTokenResponse,
    AxiosError<LoginAccessTokenError>,
    Options<LoginAccessTokenData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await loginAccessToken({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const testTokenQueryKey = (options?: Options) => [
  createQueryKey("testToken", options),
]

export const testTokenOptions = (options?: Options) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await testToken({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: testTokenQueryKey(options),
  })
}

export const testTokenMutation = (options?: Partial<Options>) => {
  const mutationOptions: UseMutationOptions<
    TestTokenResponse,
    AxiosError<TestTokenError>,
    Options
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await testToken({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const recoverPasswordQueryKey = (
  options: Options<RecoverPasswordData>,
) => [createQueryKey("recoverPassword", options)]

export const recoverPasswordOptions = (
  options: Options<RecoverPasswordData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await recoverPassword({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: recoverPasswordQueryKey(options),
  })
}

export const recoverPasswordMutation = (
  options?: Partial<Options<RecoverPasswordData>>,
) => {
  const mutationOptions: UseMutationOptions<
    RecoverPasswordResponse,
    AxiosError<RecoverPasswordError>,
    Options<RecoverPasswordData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await recoverPassword({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const resetPasswordQueryKey = (options: Options<ResetPasswordData>) => [
  createQueryKey("resetPassword", options),
]

export const resetPasswordOptions = (options: Options<ResetPasswordData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await resetPassword({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: resetPasswordQueryKey(options),
  })
}

export const resetPasswordMutation = (
  options?: Partial<Options<ResetPasswordData>>,
) => {
  const mutationOptions: UseMutationOptions<
    ResetPasswordResponse,
    AxiosError<ResetPasswordError>,
    Options<ResetPasswordData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await resetPassword({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const recoverPasswordHtmlContentQueryKey = (
  options: Options<RecoverPasswordHtmlContentData>,
) => [createQueryKey("recoverPasswordHtmlContent", options)]

export const recoverPasswordHtmlContentOptions = (
  options: Options<RecoverPasswordHtmlContentData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await recoverPasswordHtmlContent({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: recoverPasswordHtmlContentQueryKey(options),
  })
}

export const recoverPasswordHtmlContentMutation = (
  options?: Partial<Options<RecoverPasswordHtmlContentData>>,
) => {
  const mutationOptions: UseMutationOptions<
    RecoverPasswordHtmlContentResponse,
    AxiosError<RecoverPasswordHtmlContentError>,
    Options<RecoverPasswordHtmlContentData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await recoverPasswordHtmlContent({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const readUsersQueryKey = (options?: Options<ReadUsersData>) => [
  createQueryKey("readUsers", options),
]

export const readUsersOptions = (options?: Options<ReadUsersData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await readUsers({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: readUsersQueryKey(options),
  })
}

export const createUserQueryKey = (options: Options<CreateUserData>) => [
  createQueryKey("createUser", options),
]

export const createUserOptions = (options: Options<CreateUserData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await createUser({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: createUserQueryKey(options),
  })
}

export const createUserMutation = (
  options?: Partial<Options<CreateUserData>>,
) => {
  const mutationOptions: UseMutationOptions<
    CreateUserResponse,
    AxiosError<CreateUserError>,
    Options<CreateUserData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await createUser({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const readUserMeQueryKey = (options?: Options) => [
  createQueryKey("readUserMe", options),
]

export const readUserMeOptions = (options?: Options) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await readUserMe({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: readUserMeQueryKey(options),
  })
}

export const deleteUserMeMutation = (options?: Partial<Options>) => {
  const mutationOptions: UseMutationOptions<
    DeleteUserMeResponse,
    AxiosError<DeleteUserMeError>,
    Options
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteUserMe({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const updateUserMeMutation = (
  options?: Partial<Options<UpdateUserMeData>>,
) => {
  const mutationOptions: UseMutationOptions<
    UpdateUserMeResponse,
    AxiosError<UpdateUserMeError>,
    Options<UpdateUserMeData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await updateUserMe({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const updatePasswordMeMutation = (
  options?: Partial<Options<UpdatePasswordMeData>>,
) => {
  const mutationOptions: UseMutationOptions<
    UpdatePasswordMeResponse,
    AxiosError<UpdatePasswordMeError>,
    Options<UpdatePasswordMeData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await updatePasswordMe({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const registerUserQueryKey = (options: Options<RegisterUserData>) => [
  createQueryKey("registerUser", options),
]

export const registerUserOptions = (options: Options<RegisterUserData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await registerUser({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: registerUserQueryKey(options),
  })
}

export const registerUserMutation = (
  options?: Partial<Options<RegisterUserData>>,
) => {
  const mutationOptions: UseMutationOptions<
    RegisterUserResponse,
    AxiosError<RegisterUserError>,
    Options<RegisterUserData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await registerUser({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const readUserByIdQueryKey = (options: Options<ReadUserByIdData>) => [
  createQueryKey("readUserById", options),
]

export const readUserByIdOptions = (options: Options<ReadUserByIdData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await readUserById({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: readUserByIdQueryKey(options),
  })
}

export const updateUserMutation = (
  options?: Partial<Options<UpdateUserData>>,
) => {
  const mutationOptions: UseMutationOptions<
    UpdateUserResponse,
    AxiosError<UpdateUserError>,
    Options<UpdateUserData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await updateUser({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const deleteUserMutation = (
  options?: Partial<Options<DeleteUserData>>,
) => {
  const mutationOptions: UseMutationOptions<
    DeleteUserResponse,
    AxiosError<DeleteUserError>,
    Options<DeleteUserData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteUser({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const testEmailQueryKey = (options: Options<TestEmailData>) => [
  createQueryKey("testEmail", options),
]

export const testEmailOptions = (options: Options<TestEmailData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await testEmail({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: testEmailQueryKey(options),
  })
}

export const testEmailMutation = (
  options?: Partial<Options<TestEmailData>>,
) => {
  const mutationOptions: UseMutationOptions<
    TestEmailResponse,
    AxiosError<TestEmailError>,
    Options<TestEmailData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await testEmail({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const readPipelinesQueryKey = (options?: Options<ReadPipelinesData>) => [
  createQueryKey("readPipelines", options),
]

export const readPipelinesOptions = (options?: Options<ReadPipelinesData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await readPipelines({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: readPipelinesQueryKey(options),
  })
}

export const createPipelineQueryKey = (
  options: Options<CreatePipelineData>,
) => [createQueryKey("createPipeline", options)]

export const createPipelineOptions = (options: Options<CreatePipelineData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await createPipeline({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: createPipelineQueryKey(options),
  })
}

export const createPipelineMutation = (
  options?: Partial<Options<CreatePipelineData>>,
) => {
  const mutationOptions: UseMutationOptions<
    CreatePipelineResponse,
    AxiosError<CreatePipelineError>,
    Options<CreatePipelineData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await createPipeline({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const readPipelineQueryKey = (options: Options<ReadPipelineData>) => [
  createQueryKey("readPipeline", options),
]

export const readPipelineOptions = (options: Options<ReadPipelineData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await readPipeline({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: readPipelineQueryKey(options),
  })
}

export const deletePipelineMutation = (
  options?: Partial<Options<DeletePipelineData>>,
) => {
  const mutationOptions: UseMutationOptions<
    DeletePipelineResponse,
    AxiosError<DeletePipelineError>,
    Options<DeletePipelineData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deletePipeline({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const runPipelineQueryKey = (options: Options<RunPipelineData>) => [
  createQueryKey("runPipeline", options),
]

export const runPipelineOptions = (options: Options<RunPipelineData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await runPipeline({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: runPipelineQueryKey(options),
  })
}

export const runPipelineMutation = (
  options?: Partial<Options<RunPipelineData>>,
) => {
  const mutationOptions: UseMutationOptions<
    RunPipelineResponse,
    AxiosError<RunPipelineError>,
    Options<RunPipelineData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await runPipeline({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const readOperatorsQueryKey = (options?: Options) => [
  createQueryKey("readOperators", options),
]

export const readOperatorsOptions = (options?: Options) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await readOperators({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: readOperatorsQueryKey(options),
  })
}
