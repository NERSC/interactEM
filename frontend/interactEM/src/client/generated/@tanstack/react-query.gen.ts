// This file is auto-generated by @hey-api/openapi-ts

import {
  type DefaultError,
  type InfiniteData,
  type UseMutationOptions,
  infiniteQueryOptions,
  queryOptions,
} from "@tanstack/react-query"
import type { AxiosError } from "axios"
import { client as _heyApiClient } from "../client.gen"
import {
  type Options,
  agentsLaunchAgent,
  deploymentsCreatePipelineDeployment,
  deploymentsListPipelineDeployments,
  deploymentsReadPipelineDeployment,
  deploymentsUpdatePipelineDeployment,
  loginLoginAccessToken,
  loginLoginWithExternalToken,
  loginTestToken,
  operatorsReadOperators,
  pipelinesAddPipelineRevision,
  pipelinesCreatePipeline,
  pipelinesDeletePipeline,
  pipelinesListPipelineDeployments,
  pipelinesListPipelineRevisionDeployments,
  pipelinesListPipelineRevisions,
  pipelinesReadPipeline,
  pipelinesReadPipelineRevision,
  pipelinesReadPipelines,
  pipelinesUpdatePipeline,
  pipelinesUpdatePipelineRevision,
  usersCreateUser,
  usersDeleteUser,
  usersDeleteUserMe,
  usersReadUserById,
  usersReadUserMe,
  usersReadUsers,
  usersUpdatePasswordMe,
  usersUpdateUser,
  usersUpdateUserMe,
} from "../sdk.gen"
import type {
  AgentsLaunchAgentData,
  AgentsLaunchAgentError,
  DeploymentsCreatePipelineDeploymentData,
  DeploymentsCreatePipelineDeploymentError,
  DeploymentsCreatePipelineDeploymentResponse,
  DeploymentsListPipelineDeploymentsData,
  DeploymentsListPipelineDeploymentsError,
  DeploymentsListPipelineDeploymentsResponse,
  DeploymentsReadPipelineDeploymentData,
  DeploymentsUpdatePipelineDeploymentData,
  DeploymentsUpdatePipelineDeploymentError,
  DeploymentsUpdatePipelineDeploymentResponse,
  LoginLoginAccessTokenData,
  LoginLoginAccessTokenError,
  LoginLoginAccessTokenResponse,
  LoginLoginWithExternalTokenData,
  LoginLoginWithExternalTokenResponse,
  LoginTestTokenData,
  LoginTestTokenResponse,
  OperatorsReadOperatorsData,
  PipelinesAddPipelineRevisionData,
  PipelinesAddPipelineRevisionError,
  PipelinesAddPipelineRevisionResponse,
  PipelinesCreatePipelineData,
  PipelinesCreatePipelineError,
  PipelinesCreatePipelineResponse,
  PipelinesDeletePipelineData,
  PipelinesDeletePipelineError,
  PipelinesDeletePipelineResponse,
  PipelinesListPipelineDeploymentsData,
  PipelinesListPipelineDeploymentsError,
  PipelinesListPipelineDeploymentsResponse,
  PipelinesListPipelineRevisionDeploymentsData,
  PipelinesListPipelineRevisionDeploymentsError,
  PipelinesListPipelineRevisionDeploymentsResponse,
  PipelinesListPipelineRevisionsData,
  PipelinesListPipelineRevisionsError,
  PipelinesListPipelineRevisionsResponse,
  PipelinesReadPipelineData,
  PipelinesReadPipelineRevisionData,
  PipelinesReadPipelinesData,
  PipelinesReadPipelinesError,
  PipelinesReadPipelinesResponse,
  PipelinesUpdatePipelineData,
  PipelinesUpdatePipelineError,
  PipelinesUpdatePipelineResponse,
  PipelinesUpdatePipelineRevisionData,
  PipelinesUpdatePipelineRevisionError,
  PipelinesUpdatePipelineRevisionResponse,
  UsersCreateUserData,
  UsersCreateUserError,
  UsersCreateUserResponse,
  UsersDeleteUserData,
  UsersDeleteUserError,
  UsersDeleteUserMeData,
  UsersDeleteUserMeResponse,
  UsersDeleteUserResponse,
  UsersReadUserByIdData,
  UsersReadUserMeData,
  UsersReadUsersData,
  UsersUpdatePasswordMeData,
  UsersUpdatePasswordMeError,
  UsersUpdatePasswordMeResponse,
  UsersUpdateUserData,
  UsersUpdateUserError,
  UsersUpdateUserMeData,
  UsersUpdateUserMeError,
  UsersUpdateUserMeResponse,
  UsersUpdateUserResponse,
} from "../types.gen"

type QueryKey<TOptions extends Options> = [
  Pick<TOptions, "baseURL" | "body" | "headers" | "path" | "query"> & {
    _id: string
    _infinite?: boolean
  },
]

const createQueryKey = <TOptions extends Options>(
  id: string,
  options?: TOptions,
  infinite?: boolean,
): QueryKey<TOptions>[0] => {
  const params: QueryKey<TOptions>[0] = {
    _id: id,
    baseURL: (options?.client ?? _heyApiClient).getConfig().baseURL,
  } as QueryKey<TOptions>[0]
  if (infinite) {
    params._infinite = infinite
  }
  if (options?.body) {
    params.body = options.body
  }
  if (options?.headers) {
    params.headers = options.headers
  }
  if (options?.path) {
    params.path = options.path
  }
  if (options?.query) {
    params.query = options.query
  }
  return params
}

export const loginLoginAccessTokenQueryKey = (
  options: Options<LoginLoginAccessTokenData>,
) => [createQueryKey("loginLoginAccessToken", options)]

export const loginLoginAccessTokenOptions = (
  options: Options<LoginLoginAccessTokenData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await loginLoginAccessToken({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: loginLoginAccessTokenQueryKey(options),
  })
}

export const loginLoginAccessTokenMutation = (
  options?: Partial<Options<LoginLoginAccessTokenData>>,
) => {
  const mutationOptions: UseMutationOptions<
    LoginLoginAccessTokenResponse,
    AxiosError<LoginLoginAccessTokenError>,
    Options<LoginLoginAccessTokenData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await loginLoginAccessToken({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const loginLoginWithExternalTokenQueryKey = (
  options?: Options<LoginLoginWithExternalTokenData>,
) => [createQueryKey("loginLoginWithExternalToken", options)]

export const loginLoginWithExternalTokenOptions = (
  options?: Options<LoginLoginWithExternalTokenData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await loginLoginWithExternalToken({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: loginLoginWithExternalTokenQueryKey(options),
  })
}

export const loginLoginWithExternalTokenMutation = (
  options?: Partial<Options<LoginLoginWithExternalTokenData>>,
) => {
  const mutationOptions: UseMutationOptions<
    LoginLoginWithExternalTokenResponse,
    AxiosError<DefaultError>,
    Options<LoginLoginWithExternalTokenData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await loginLoginWithExternalToken({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const loginTestTokenQueryKey = (
  options?: Options<LoginTestTokenData>,
) => [createQueryKey("loginTestToken", options)]

export const loginTestTokenOptions = (
  options?: Options<LoginTestTokenData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await loginTestToken({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: loginTestTokenQueryKey(options),
  })
}

export const loginTestTokenMutation = (
  options?: Partial<Options<LoginTestTokenData>>,
) => {
  const mutationOptions: UseMutationOptions<
    LoginTestTokenResponse,
    AxiosError<DefaultError>,
    Options<LoginTestTokenData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await loginTestToken({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const usersReadUsersQueryKey = (
  options?: Options<UsersReadUsersData>,
) => [createQueryKey("usersReadUsers", options)]

export const usersReadUsersOptions = (
  options?: Options<UsersReadUsersData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await usersReadUsers({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: usersReadUsersQueryKey(options),
  })
}

export const usersCreateUserQueryKey = (
  options: Options<UsersCreateUserData>,
) => [createQueryKey("usersCreateUser", options)]

export const usersCreateUserOptions = (
  options: Options<UsersCreateUserData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await usersCreateUser({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: usersCreateUserQueryKey(options),
  })
}

export const usersCreateUserMutation = (
  options?: Partial<Options<UsersCreateUserData>>,
) => {
  const mutationOptions: UseMutationOptions<
    UsersCreateUserResponse,
    AxiosError<UsersCreateUserError>,
    Options<UsersCreateUserData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await usersCreateUser({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const usersDeleteUserMeMutation = (
  options?: Partial<Options<UsersDeleteUserMeData>>,
) => {
  const mutationOptions: UseMutationOptions<
    UsersDeleteUserMeResponse,
    AxiosError<DefaultError>,
    Options<UsersDeleteUserMeData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await usersDeleteUserMe({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const usersReadUserMeQueryKey = (
  options?: Options<UsersReadUserMeData>,
) => [createQueryKey("usersReadUserMe", options)]

export const usersReadUserMeOptions = (
  options?: Options<UsersReadUserMeData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await usersReadUserMe({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: usersReadUserMeQueryKey(options),
  })
}

export const usersUpdateUserMeMutation = (
  options?: Partial<Options<UsersUpdateUserMeData>>,
) => {
  const mutationOptions: UseMutationOptions<
    UsersUpdateUserMeResponse,
    AxiosError<UsersUpdateUserMeError>,
    Options<UsersUpdateUserMeData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await usersUpdateUserMe({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const usersUpdatePasswordMeMutation = (
  options?: Partial<Options<UsersUpdatePasswordMeData>>,
) => {
  const mutationOptions: UseMutationOptions<
    UsersUpdatePasswordMeResponse,
    AxiosError<UsersUpdatePasswordMeError>,
    Options<UsersUpdatePasswordMeData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await usersUpdatePasswordMe({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const usersDeleteUserMutation = (
  options?: Partial<Options<UsersDeleteUserData>>,
) => {
  const mutationOptions: UseMutationOptions<
    UsersDeleteUserResponse,
    AxiosError<UsersDeleteUserError>,
    Options<UsersDeleteUserData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await usersDeleteUser({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const usersReadUserByIdQueryKey = (
  options: Options<UsersReadUserByIdData>,
) => [createQueryKey("usersReadUserById", options)]

export const usersReadUserByIdOptions = (
  options: Options<UsersReadUserByIdData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await usersReadUserById({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: usersReadUserByIdQueryKey(options),
  })
}

export const usersUpdateUserMutation = (
  options?: Partial<Options<UsersUpdateUserData>>,
) => {
  const mutationOptions: UseMutationOptions<
    UsersUpdateUserResponse,
    AxiosError<UsersUpdateUserError>,
    Options<UsersUpdateUserData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await usersUpdateUser({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const pipelinesReadPipelinesQueryKey = (
  options?: Options<PipelinesReadPipelinesData>,
) => [createQueryKey("pipelinesReadPipelines", options)]

export const pipelinesReadPipelinesOptions = (
  options?: Options<PipelinesReadPipelinesData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await pipelinesReadPipelines({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: pipelinesReadPipelinesQueryKey(options),
  })
}

const createInfiniteParams = <
  K extends Pick<QueryKey<Options>[0], "body" | "headers" | "path" | "query">,
>(
  queryKey: QueryKey<Options>,
  page: K,
) => {
  const params = queryKey[0]
  if (page.body) {
    params.body = {
      ...(queryKey[0].body as any),
      ...(page.body as any),
    }
  }
  if (page.headers) {
    params.headers = {
      ...queryKey[0].headers,
      ...page.headers,
    }
  }
  if (page.path) {
    params.path = {
      ...(queryKey[0].path as any),
      ...(page.path as any),
    }
  }
  if (page.query) {
    params.query = {
      ...(queryKey[0].query as any),
      ...(page.query as any),
    }
  }
  return params as unknown as typeof page
}

export const pipelinesReadPipelinesInfiniteQueryKey = (
  options?: Options<PipelinesReadPipelinesData>,
): QueryKey<Options<PipelinesReadPipelinesData>> => [
  createQueryKey("pipelinesReadPipelines", options, true),
]

export const pipelinesReadPipelinesInfiniteOptions = (
  options?: Options<PipelinesReadPipelinesData>,
) => {
  return infiniteQueryOptions<
    PipelinesReadPipelinesResponse,
    AxiosError<PipelinesReadPipelinesError>,
    InfiniteData<PipelinesReadPipelinesResponse>,
    QueryKey<Options<PipelinesReadPipelinesData>>,
    | number
    | Pick<
        QueryKey<Options<PipelinesReadPipelinesData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<Options<PipelinesReadPipelinesData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  offset: pageParam,
                },
              }
        const params = createInfiniteParams(queryKey, page)
        const { data } = await pipelinesReadPipelines({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        })
        return data
      },
      queryKey: pipelinesReadPipelinesInfiniteQueryKey(options),
    },
  )
}

export const pipelinesCreatePipelineQueryKey = (
  options: Options<PipelinesCreatePipelineData>,
) => [createQueryKey("pipelinesCreatePipeline", options)]

export const pipelinesCreatePipelineOptions = (
  options: Options<PipelinesCreatePipelineData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await pipelinesCreatePipeline({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: pipelinesCreatePipelineQueryKey(options),
  })
}

export const pipelinesCreatePipelineMutation = (
  options?: Partial<Options<PipelinesCreatePipelineData>>,
) => {
  const mutationOptions: UseMutationOptions<
    PipelinesCreatePipelineResponse,
    AxiosError<PipelinesCreatePipelineError>,
    Options<PipelinesCreatePipelineData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await pipelinesCreatePipeline({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const pipelinesDeletePipelineMutation = (
  options?: Partial<Options<PipelinesDeletePipelineData>>,
) => {
  const mutationOptions: UseMutationOptions<
    PipelinesDeletePipelineResponse,
    AxiosError<PipelinesDeletePipelineError>,
    Options<PipelinesDeletePipelineData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await pipelinesDeletePipeline({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const pipelinesReadPipelineQueryKey = (
  options: Options<PipelinesReadPipelineData>,
) => [createQueryKey("pipelinesReadPipeline", options)]

export const pipelinesReadPipelineOptions = (
  options: Options<PipelinesReadPipelineData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await pipelinesReadPipeline({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: pipelinesReadPipelineQueryKey(options),
  })
}

export const pipelinesUpdatePipelineMutation = (
  options?: Partial<Options<PipelinesUpdatePipelineData>>,
) => {
  const mutationOptions: UseMutationOptions<
    PipelinesUpdatePipelineResponse,
    AxiosError<PipelinesUpdatePipelineError>,
    Options<PipelinesUpdatePipelineData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await pipelinesUpdatePipeline({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const pipelinesListPipelineRevisionsQueryKey = (
  options: Options<PipelinesListPipelineRevisionsData>,
) => [createQueryKey("pipelinesListPipelineRevisions", options)]

export const pipelinesListPipelineRevisionsOptions = (
  options: Options<PipelinesListPipelineRevisionsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await pipelinesListPipelineRevisions({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: pipelinesListPipelineRevisionsQueryKey(options),
  })
}

export const pipelinesListPipelineRevisionsInfiniteQueryKey = (
  options: Options<PipelinesListPipelineRevisionsData>,
): QueryKey<Options<PipelinesListPipelineRevisionsData>> => [
  createQueryKey("pipelinesListPipelineRevisions", options, true),
]

export const pipelinesListPipelineRevisionsInfiniteOptions = (
  options: Options<PipelinesListPipelineRevisionsData>,
) => {
  return infiniteQueryOptions<
    PipelinesListPipelineRevisionsResponse,
    AxiosError<PipelinesListPipelineRevisionsError>,
    InfiniteData<PipelinesListPipelineRevisionsResponse>,
    QueryKey<Options<PipelinesListPipelineRevisionsData>>,
    | number
    | Pick<
        QueryKey<Options<PipelinesListPipelineRevisionsData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<Options<PipelinesListPipelineRevisionsData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  offset: pageParam,
                },
              }
        const params = createInfiniteParams(queryKey, page)
        const { data } = await pipelinesListPipelineRevisions({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        })
        return data
      },
      queryKey: pipelinesListPipelineRevisionsInfiniteQueryKey(options),
    },
  )
}

export const pipelinesAddPipelineRevisionQueryKey = (
  options: Options<PipelinesAddPipelineRevisionData>,
) => [createQueryKey("pipelinesAddPipelineRevision", options)]

export const pipelinesAddPipelineRevisionOptions = (
  options: Options<PipelinesAddPipelineRevisionData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await pipelinesAddPipelineRevision({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: pipelinesAddPipelineRevisionQueryKey(options),
  })
}

export const pipelinesAddPipelineRevisionMutation = (
  options?: Partial<Options<PipelinesAddPipelineRevisionData>>,
) => {
  const mutationOptions: UseMutationOptions<
    PipelinesAddPipelineRevisionResponse,
    AxiosError<PipelinesAddPipelineRevisionError>,
    Options<PipelinesAddPipelineRevisionData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await pipelinesAddPipelineRevision({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const pipelinesReadPipelineRevisionQueryKey = (
  options: Options<PipelinesReadPipelineRevisionData>,
) => [createQueryKey("pipelinesReadPipelineRevision", options)]

export const pipelinesReadPipelineRevisionOptions = (
  options: Options<PipelinesReadPipelineRevisionData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await pipelinesReadPipelineRevision({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: pipelinesReadPipelineRevisionQueryKey(options),
  })
}

export const pipelinesUpdatePipelineRevisionMutation = (
  options?: Partial<Options<PipelinesUpdatePipelineRevisionData>>,
) => {
  const mutationOptions: UseMutationOptions<
    PipelinesUpdatePipelineRevisionResponse,
    AxiosError<PipelinesUpdatePipelineRevisionError>,
    Options<PipelinesUpdatePipelineRevisionData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await pipelinesUpdatePipelineRevision({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const pipelinesListPipelineDeploymentsQueryKey = (
  options: Options<PipelinesListPipelineDeploymentsData>,
) => [createQueryKey("pipelinesListPipelineDeployments", options)]

export const pipelinesListPipelineDeploymentsOptions = (
  options: Options<PipelinesListPipelineDeploymentsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await pipelinesListPipelineDeployments({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: pipelinesListPipelineDeploymentsQueryKey(options),
  })
}

export const pipelinesListPipelineDeploymentsInfiniteQueryKey = (
  options: Options<PipelinesListPipelineDeploymentsData>,
): QueryKey<Options<PipelinesListPipelineDeploymentsData>> => [
  createQueryKey("pipelinesListPipelineDeployments", options, true),
]

export const pipelinesListPipelineDeploymentsInfiniteOptions = (
  options: Options<PipelinesListPipelineDeploymentsData>,
) => {
  return infiniteQueryOptions<
    PipelinesListPipelineDeploymentsResponse,
    AxiosError<PipelinesListPipelineDeploymentsError>,
    InfiniteData<PipelinesListPipelineDeploymentsResponse>,
    QueryKey<Options<PipelinesListPipelineDeploymentsData>>,
    | number
    | Pick<
        QueryKey<Options<PipelinesListPipelineDeploymentsData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<Options<PipelinesListPipelineDeploymentsData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  offset: pageParam,
                },
              }
        const params = createInfiniteParams(queryKey, page)
        const { data } = await pipelinesListPipelineDeployments({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        })
        return data
      },
      queryKey: pipelinesListPipelineDeploymentsInfiniteQueryKey(options),
    },
  )
}

export const pipelinesListPipelineRevisionDeploymentsQueryKey = (
  options: Options<PipelinesListPipelineRevisionDeploymentsData>,
) => [createQueryKey("pipelinesListPipelineRevisionDeployments", options)]

export const pipelinesListPipelineRevisionDeploymentsOptions = (
  options: Options<PipelinesListPipelineRevisionDeploymentsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await pipelinesListPipelineRevisionDeployments({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: pipelinesListPipelineRevisionDeploymentsQueryKey(options),
  })
}

export const pipelinesListPipelineRevisionDeploymentsInfiniteQueryKey = (
  options: Options<PipelinesListPipelineRevisionDeploymentsData>,
): QueryKey<Options<PipelinesListPipelineRevisionDeploymentsData>> => [
  createQueryKey("pipelinesListPipelineRevisionDeployments", options, true),
]

export const pipelinesListPipelineRevisionDeploymentsInfiniteOptions = (
  options: Options<PipelinesListPipelineRevisionDeploymentsData>,
) => {
  return infiniteQueryOptions<
    PipelinesListPipelineRevisionDeploymentsResponse,
    AxiosError<PipelinesListPipelineRevisionDeploymentsError>,
    InfiniteData<PipelinesListPipelineRevisionDeploymentsResponse>,
    QueryKey<Options<PipelinesListPipelineRevisionDeploymentsData>>,
    | number
    | Pick<
        QueryKey<Options<PipelinesListPipelineRevisionDeploymentsData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<Options<PipelinesListPipelineRevisionDeploymentsData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  offset: pageParam,
                },
              }
        const params = createInfiniteParams(queryKey, page)
        const { data } = await pipelinesListPipelineRevisionDeployments({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        })
        return data
      },
      queryKey:
        pipelinesListPipelineRevisionDeploymentsInfiniteQueryKey(options),
    },
  )
}

export const deploymentsListPipelineDeploymentsQueryKey = (
  options?: Options<DeploymentsListPipelineDeploymentsData>,
) => [createQueryKey("deploymentsListPipelineDeployments", options)]

export const deploymentsListPipelineDeploymentsOptions = (
  options?: Options<DeploymentsListPipelineDeploymentsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await deploymentsListPipelineDeployments({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: deploymentsListPipelineDeploymentsQueryKey(options),
  })
}

export const deploymentsListPipelineDeploymentsInfiniteQueryKey = (
  options?: Options<DeploymentsListPipelineDeploymentsData>,
): QueryKey<Options<DeploymentsListPipelineDeploymentsData>> => [
  createQueryKey("deploymentsListPipelineDeployments", options, true),
]

export const deploymentsListPipelineDeploymentsInfiniteOptions = (
  options?: Options<DeploymentsListPipelineDeploymentsData>,
) => {
  return infiniteQueryOptions<
    DeploymentsListPipelineDeploymentsResponse,
    AxiosError<DeploymentsListPipelineDeploymentsError>,
    InfiniteData<DeploymentsListPipelineDeploymentsResponse>,
    QueryKey<Options<DeploymentsListPipelineDeploymentsData>>,
    | number
    | Pick<
        QueryKey<Options<DeploymentsListPipelineDeploymentsData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<Options<DeploymentsListPipelineDeploymentsData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  offset: pageParam,
                },
              }
        const params = createInfiniteParams(queryKey, page)
        const { data } = await deploymentsListPipelineDeployments({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        })
        return data
      },
      queryKey: deploymentsListPipelineDeploymentsInfiniteQueryKey(options),
    },
  )
}

export const deploymentsCreatePipelineDeploymentQueryKey = (
  options: Options<DeploymentsCreatePipelineDeploymentData>,
) => [createQueryKey("deploymentsCreatePipelineDeployment", options)]

export const deploymentsCreatePipelineDeploymentOptions = (
  options: Options<DeploymentsCreatePipelineDeploymentData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await deploymentsCreatePipelineDeployment({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: deploymentsCreatePipelineDeploymentQueryKey(options),
  })
}

export const deploymentsCreatePipelineDeploymentMutation = (
  options?: Partial<Options<DeploymentsCreatePipelineDeploymentData>>,
) => {
  const mutationOptions: UseMutationOptions<
    DeploymentsCreatePipelineDeploymentResponse,
    AxiosError<DeploymentsCreatePipelineDeploymentError>,
    Options<DeploymentsCreatePipelineDeploymentData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deploymentsCreatePipelineDeployment({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const deploymentsReadPipelineDeploymentQueryKey = (
  options: Options<DeploymentsReadPipelineDeploymentData>,
) => [createQueryKey("deploymentsReadPipelineDeployment", options)]

export const deploymentsReadPipelineDeploymentOptions = (
  options: Options<DeploymentsReadPipelineDeploymentData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await deploymentsReadPipelineDeployment({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: deploymentsReadPipelineDeploymentQueryKey(options),
  })
}

export const deploymentsUpdatePipelineDeploymentMutation = (
  options?: Partial<Options<DeploymentsUpdatePipelineDeploymentData>>,
) => {
  const mutationOptions: UseMutationOptions<
    DeploymentsUpdatePipelineDeploymentResponse,
    AxiosError<DeploymentsUpdatePipelineDeploymentError>,
    Options<DeploymentsUpdatePipelineDeploymentData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deploymentsUpdatePipelineDeployment({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const operatorsReadOperatorsQueryKey = (
  options?: Options<OperatorsReadOperatorsData>,
) => [createQueryKey("operatorsReadOperators", options)]

export const operatorsReadOperatorsOptions = (
  options?: Options<OperatorsReadOperatorsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await operatorsReadOperators({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: operatorsReadOperatorsQueryKey(options),
  })
}

export const agentsLaunchAgentQueryKey = (
  options: Options<AgentsLaunchAgentData>,
) => [createQueryKey("agentsLaunchAgent", options)]

export const agentsLaunchAgentOptions = (
  options: Options<AgentsLaunchAgentData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await agentsLaunchAgent({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: agentsLaunchAgentQueryKey(options),
  })
}

export const agentsLaunchAgentMutation = (
  options?: Partial<Options<AgentsLaunchAgentData>>,
) => {
  const mutationOptions: UseMutationOptions<
    unknown,
    AxiosError<AgentsLaunchAgentError>,
    Options<AgentsLaunchAgentData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await agentsLaunchAgent({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}
