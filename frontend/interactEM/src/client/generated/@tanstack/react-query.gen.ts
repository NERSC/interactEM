// This file is auto-generated by @hey-api/openapi-ts

import {
  type DefaultError,
  type UseMutationOptions,
  queryOptions,
} from "@tanstack/react-query"
import type { AxiosError } from "axios"
import { client as _heyApiClient } from "../client.gen"
import {
  type Options,
  agentsLaunchAgent,
  loginLoginAccessToken,
  loginLoginWithExternalToken,
  loginRecoverPassword,
  loginRecoverPasswordHtmlContent,
  loginResetPassword,
  loginTestToken,
  operatorsReadOperators,
  pipelinesAddPipelineRevision,
  pipelinesCreatePipeline,
  pipelinesDeletePipeline,
  pipelinesListPipelineRevisions,
  pipelinesReadPipeline,
  pipelinesReadPipelineRevision,
  pipelinesReadPipelines,
  pipelinesRunPipeline,
  pipelinesUpdatePipeline,
  pipelinesUpdatePipelineRevision,
  usersCreateUser,
  usersDeleteUser,
  usersDeleteUserMe,
  usersReadUserById,
  usersReadUserMe,
  usersReadUsers,
  usersRegisterUser,
  usersUpdatePasswordMe,
  usersUpdateUser,
  usersUpdateUserMe,
  utilsTestEmail,
} from "../sdk.gen"
import type {
  AgentsLaunchAgentData,
  AgentsLaunchAgentError,
  LoginLoginAccessTokenData,
  LoginLoginAccessTokenError,
  LoginLoginAccessTokenResponse,
  LoginLoginWithExternalTokenData,
  LoginLoginWithExternalTokenResponse,
  LoginRecoverPasswordData,
  LoginRecoverPasswordError,
  LoginRecoverPasswordHtmlContentData,
  LoginRecoverPasswordHtmlContentError,
  LoginRecoverPasswordHtmlContentResponse,
  LoginRecoverPasswordResponse,
  LoginResetPasswordData,
  LoginResetPasswordError,
  LoginResetPasswordResponse,
  LoginTestTokenData,
  LoginTestTokenResponse,
  OperatorsReadOperatorsData,
  PipelinesAddPipelineRevisionData,
  PipelinesAddPipelineRevisionError,
  PipelinesAddPipelineRevisionResponse,
  PipelinesCreatePipelineData,
  PipelinesCreatePipelineError,
  PipelinesCreatePipelineResponse,
  PipelinesDeletePipelineData,
  PipelinesDeletePipelineError,
  PipelinesDeletePipelineResponse,
  PipelinesListPipelineRevisionsData,
  PipelinesReadPipelineData,
  PipelinesReadPipelineRevisionData,
  PipelinesReadPipelinesData,
  PipelinesRunPipelineData,
  PipelinesRunPipelineError,
  PipelinesRunPipelineResponse,
  PipelinesUpdatePipelineData,
  PipelinesUpdatePipelineError,
  PipelinesUpdatePipelineResponse,
  PipelinesUpdatePipelineRevisionData,
  PipelinesUpdatePipelineRevisionError,
  PipelinesUpdatePipelineRevisionResponse,
  UsersCreateUserData,
  UsersCreateUserError,
  UsersCreateUserResponse,
  UsersDeleteUserData,
  UsersDeleteUserError,
  UsersDeleteUserMeData,
  UsersDeleteUserMeResponse,
  UsersDeleteUserResponse,
  UsersReadUserByIdData,
  UsersReadUserMeData,
  UsersReadUsersData,
  UsersRegisterUserData,
  UsersRegisterUserError,
  UsersRegisterUserResponse,
  UsersUpdatePasswordMeData,
  UsersUpdatePasswordMeError,
  UsersUpdatePasswordMeResponse,
  UsersUpdateUserData,
  UsersUpdateUserError,
  UsersUpdateUserMeData,
  UsersUpdateUserMeError,
  UsersUpdateUserMeResponse,
  UsersUpdateUserResponse,
  UtilsTestEmailData,
  UtilsTestEmailError,
  UtilsTestEmailResponse,
} from "../types.gen"

type QueryKey<TOptions extends Options> = [
  Pick<TOptions, "baseURL" | "body" | "headers" | "path" | "query"> & {
    _id: string
    _infinite?: boolean
  },
]

const createQueryKey = <TOptions extends Options>(
  id: string,
  options?: TOptions,
  infinite?: boolean,
): QueryKey<TOptions>[0] => {
  const params: QueryKey<TOptions>[0] = {
    _id: id,
    baseURL: (options?.client ?? _heyApiClient).getConfig().baseURL,
  } as QueryKey<TOptions>[0]
  if (infinite) {
    params._infinite = infinite
  }
  if (options?.body) {
    params.body = options.body
  }
  if (options?.headers) {
    params.headers = options.headers
  }
  if (options?.path) {
    params.path = options.path
  }
  if (options?.query) {
    params.query = options.query
  }
  return params
}

export const loginLoginAccessTokenQueryKey = (
  options: Options<LoginLoginAccessTokenData>,
) => [createQueryKey("loginLoginAccessToken", options)]

export const loginLoginAccessTokenOptions = (
  options: Options<LoginLoginAccessTokenData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await loginLoginAccessToken({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: loginLoginAccessTokenQueryKey(options),
  })
}

export const loginLoginAccessTokenMutation = (
  options?: Partial<Options<LoginLoginAccessTokenData>>,
) => {
  const mutationOptions: UseMutationOptions<
    LoginLoginAccessTokenResponse,
    AxiosError<LoginLoginAccessTokenError>,
    Options<LoginLoginAccessTokenData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await loginLoginAccessToken({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const loginLoginWithExternalTokenQueryKey = (
  options?: Options<LoginLoginWithExternalTokenData>,
) => [createQueryKey("loginLoginWithExternalToken", options)]

export const loginLoginWithExternalTokenOptions = (
  options?: Options<LoginLoginWithExternalTokenData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await loginLoginWithExternalToken({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: loginLoginWithExternalTokenQueryKey(options),
  })
}

export const loginLoginWithExternalTokenMutation = (
  options?: Partial<Options<LoginLoginWithExternalTokenData>>,
) => {
  const mutationOptions: UseMutationOptions<
    LoginLoginWithExternalTokenResponse,
    AxiosError<DefaultError>,
    Options<LoginLoginWithExternalTokenData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await loginLoginWithExternalToken({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const loginTestTokenQueryKey = (
  options?: Options<LoginTestTokenData>,
) => [createQueryKey("loginTestToken", options)]

export const loginTestTokenOptions = (
  options?: Options<LoginTestTokenData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await loginTestToken({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: loginTestTokenQueryKey(options),
  })
}

export const loginTestTokenMutation = (
  options?: Partial<Options<LoginTestTokenData>>,
) => {
  const mutationOptions: UseMutationOptions<
    LoginTestTokenResponse,
    AxiosError<DefaultError>,
    Options<LoginTestTokenData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await loginTestToken({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const loginRecoverPasswordQueryKey = (
  options: Options<LoginRecoverPasswordData>,
) => [createQueryKey("loginRecoverPassword", options)]

export const loginRecoverPasswordOptions = (
  options: Options<LoginRecoverPasswordData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await loginRecoverPassword({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: loginRecoverPasswordQueryKey(options),
  })
}

export const loginRecoverPasswordMutation = (
  options?: Partial<Options<LoginRecoverPasswordData>>,
) => {
  const mutationOptions: UseMutationOptions<
    LoginRecoverPasswordResponse,
    AxiosError<LoginRecoverPasswordError>,
    Options<LoginRecoverPasswordData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await loginRecoverPassword({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const loginResetPasswordQueryKey = (
  options: Options<LoginResetPasswordData>,
) => [createQueryKey("loginResetPassword", options)]

export const loginResetPasswordOptions = (
  options: Options<LoginResetPasswordData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await loginResetPassword({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: loginResetPasswordQueryKey(options),
  })
}

export const loginResetPasswordMutation = (
  options?: Partial<Options<LoginResetPasswordData>>,
) => {
  const mutationOptions: UseMutationOptions<
    LoginResetPasswordResponse,
    AxiosError<LoginResetPasswordError>,
    Options<LoginResetPasswordData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await loginResetPassword({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const loginRecoverPasswordHtmlContentQueryKey = (
  options: Options<LoginRecoverPasswordHtmlContentData>,
) => [createQueryKey("loginRecoverPasswordHtmlContent", options)]

export const loginRecoverPasswordHtmlContentOptions = (
  options: Options<LoginRecoverPasswordHtmlContentData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await loginRecoverPasswordHtmlContent({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: loginRecoverPasswordHtmlContentQueryKey(options),
  })
}

export const loginRecoverPasswordHtmlContentMutation = (
  options?: Partial<Options<LoginRecoverPasswordHtmlContentData>>,
) => {
  const mutationOptions: UseMutationOptions<
    LoginRecoverPasswordHtmlContentResponse,
    AxiosError<LoginRecoverPasswordHtmlContentError>,
    Options<LoginRecoverPasswordHtmlContentData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await loginRecoverPasswordHtmlContent({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const usersReadUsersQueryKey = (
  options?: Options<UsersReadUsersData>,
) => [createQueryKey("usersReadUsers", options)]

export const usersReadUsersOptions = (
  options?: Options<UsersReadUsersData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await usersReadUsers({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: usersReadUsersQueryKey(options),
  })
}

export const usersCreateUserQueryKey = (
  options: Options<UsersCreateUserData>,
) => [createQueryKey("usersCreateUser", options)]

export const usersCreateUserOptions = (
  options: Options<UsersCreateUserData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await usersCreateUser({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: usersCreateUserQueryKey(options),
  })
}

export const usersCreateUserMutation = (
  options?: Partial<Options<UsersCreateUserData>>,
) => {
  const mutationOptions: UseMutationOptions<
    UsersCreateUserResponse,
    AxiosError<UsersCreateUserError>,
    Options<UsersCreateUserData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await usersCreateUser({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const usersDeleteUserMeMutation = (
  options?: Partial<Options<UsersDeleteUserMeData>>,
) => {
  const mutationOptions: UseMutationOptions<
    UsersDeleteUserMeResponse,
    AxiosError<DefaultError>,
    Options<UsersDeleteUserMeData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await usersDeleteUserMe({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const usersReadUserMeQueryKey = (
  options?: Options<UsersReadUserMeData>,
) => [createQueryKey("usersReadUserMe", options)]

export const usersReadUserMeOptions = (
  options?: Options<UsersReadUserMeData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await usersReadUserMe({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: usersReadUserMeQueryKey(options),
  })
}

export const usersUpdateUserMeMutation = (
  options?: Partial<Options<UsersUpdateUserMeData>>,
) => {
  const mutationOptions: UseMutationOptions<
    UsersUpdateUserMeResponse,
    AxiosError<UsersUpdateUserMeError>,
    Options<UsersUpdateUserMeData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await usersUpdateUserMe({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const usersUpdatePasswordMeMutation = (
  options?: Partial<Options<UsersUpdatePasswordMeData>>,
) => {
  const mutationOptions: UseMutationOptions<
    UsersUpdatePasswordMeResponse,
    AxiosError<UsersUpdatePasswordMeError>,
    Options<UsersUpdatePasswordMeData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await usersUpdatePasswordMe({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const usersRegisterUserQueryKey = (
  options: Options<UsersRegisterUserData>,
) => [createQueryKey("usersRegisterUser", options)]

export const usersRegisterUserOptions = (
  options: Options<UsersRegisterUserData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await usersRegisterUser({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: usersRegisterUserQueryKey(options),
  })
}

export const usersRegisterUserMutation = (
  options?: Partial<Options<UsersRegisterUserData>>,
) => {
  const mutationOptions: UseMutationOptions<
    UsersRegisterUserResponse,
    AxiosError<UsersRegisterUserError>,
    Options<UsersRegisterUserData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await usersRegisterUser({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const usersDeleteUserMutation = (
  options?: Partial<Options<UsersDeleteUserData>>,
) => {
  const mutationOptions: UseMutationOptions<
    UsersDeleteUserResponse,
    AxiosError<UsersDeleteUserError>,
    Options<UsersDeleteUserData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await usersDeleteUser({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const usersReadUserByIdQueryKey = (
  options: Options<UsersReadUserByIdData>,
) => [createQueryKey("usersReadUserById", options)]

export const usersReadUserByIdOptions = (
  options: Options<UsersReadUserByIdData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await usersReadUserById({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: usersReadUserByIdQueryKey(options),
  })
}

export const usersUpdateUserMutation = (
  options?: Partial<Options<UsersUpdateUserData>>,
) => {
  const mutationOptions: UseMutationOptions<
    UsersUpdateUserResponse,
    AxiosError<UsersUpdateUserError>,
    Options<UsersUpdateUserData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await usersUpdateUser({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const utilsTestEmailQueryKey = (
  options: Options<UtilsTestEmailData>,
) => [createQueryKey("utilsTestEmail", options)]

export const utilsTestEmailOptions = (options: Options<UtilsTestEmailData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await utilsTestEmail({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: utilsTestEmailQueryKey(options),
  })
}

export const utilsTestEmailMutation = (
  options?: Partial<Options<UtilsTestEmailData>>,
) => {
  const mutationOptions: UseMutationOptions<
    UtilsTestEmailResponse,
    AxiosError<UtilsTestEmailError>,
    Options<UtilsTestEmailData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await utilsTestEmail({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const pipelinesReadPipelinesQueryKey = (
  options?: Options<PipelinesReadPipelinesData>,
) => [createQueryKey("pipelinesReadPipelines", options)]

export const pipelinesReadPipelinesOptions = (
  options?: Options<PipelinesReadPipelinesData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await pipelinesReadPipelines({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: pipelinesReadPipelinesQueryKey(options),
  })
}

export const pipelinesCreatePipelineQueryKey = (
  options: Options<PipelinesCreatePipelineData>,
) => [createQueryKey("pipelinesCreatePipeline", options)]

export const pipelinesCreatePipelineOptions = (
  options: Options<PipelinesCreatePipelineData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await pipelinesCreatePipeline({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: pipelinesCreatePipelineQueryKey(options),
  })
}

export const pipelinesCreatePipelineMutation = (
  options?: Partial<Options<PipelinesCreatePipelineData>>,
) => {
  const mutationOptions: UseMutationOptions<
    PipelinesCreatePipelineResponse,
    AxiosError<PipelinesCreatePipelineError>,
    Options<PipelinesCreatePipelineData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await pipelinesCreatePipeline({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const pipelinesDeletePipelineMutation = (
  options?: Partial<Options<PipelinesDeletePipelineData>>,
) => {
  const mutationOptions: UseMutationOptions<
    PipelinesDeletePipelineResponse,
    AxiosError<PipelinesDeletePipelineError>,
    Options<PipelinesDeletePipelineData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await pipelinesDeletePipeline({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const pipelinesReadPipelineQueryKey = (
  options: Options<PipelinesReadPipelineData>,
) => [createQueryKey("pipelinesReadPipeline", options)]

export const pipelinesReadPipelineOptions = (
  options: Options<PipelinesReadPipelineData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await pipelinesReadPipeline({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: pipelinesReadPipelineQueryKey(options),
  })
}

export const pipelinesUpdatePipelineMutation = (
  options?: Partial<Options<PipelinesUpdatePipelineData>>,
) => {
  const mutationOptions: UseMutationOptions<
    PipelinesUpdatePipelineResponse,
    AxiosError<PipelinesUpdatePipelineError>,
    Options<PipelinesUpdatePipelineData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await pipelinesUpdatePipeline({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const pipelinesListPipelineRevisionsQueryKey = (
  options: Options<PipelinesListPipelineRevisionsData>,
) => [createQueryKey("pipelinesListPipelineRevisions", options)]

export const pipelinesListPipelineRevisionsOptions = (
  options: Options<PipelinesListPipelineRevisionsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await pipelinesListPipelineRevisions({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: pipelinesListPipelineRevisionsQueryKey(options),
  })
}

export const pipelinesAddPipelineRevisionQueryKey = (
  options: Options<PipelinesAddPipelineRevisionData>,
) => [createQueryKey("pipelinesAddPipelineRevision", options)]

export const pipelinesAddPipelineRevisionOptions = (
  options: Options<PipelinesAddPipelineRevisionData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await pipelinesAddPipelineRevision({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: pipelinesAddPipelineRevisionQueryKey(options),
  })
}

export const pipelinesAddPipelineRevisionMutation = (
  options?: Partial<Options<PipelinesAddPipelineRevisionData>>,
) => {
  const mutationOptions: UseMutationOptions<
    PipelinesAddPipelineRevisionResponse,
    AxiosError<PipelinesAddPipelineRevisionError>,
    Options<PipelinesAddPipelineRevisionData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await pipelinesAddPipelineRevision({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const pipelinesReadPipelineRevisionQueryKey = (
  options: Options<PipelinesReadPipelineRevisionData>,
) => [createQueryKey("pipelinesReadPipelineRevision", options)]

export const pipelinesReadPipelineRevisionOptions = (
  options: Options<PipelinesReadPipelineRevisionData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await pipelinesReadPipelineRevision({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: pipelinesReadPipelineRevisionQueryKey(options),
  })
}

export const pipelinesUpdatePipelineRevisionMutation = (
  options?: Partial<Options<PipelinesUpdatePipelineRevisionData>>,
) => {
  const mutationOptions: UseMutationOptions<
    PipelinesUpdatePipelineRevisionResponse,
    AxiosError<PipelinesUpdatePipelineRevisionError>,
    Options<PipelinesUpdatePipelineRevisionData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await pipelinesUpdatePipelineRevision({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const pipelinesRunPipelineQueryKey = (
  options: Options<PipelinesRunPipelineData>,
) => [createQueryKey("pipelinesRunPipeline", options)]

export const pipelinesRunPipelineOptions = (
  options: Options<PipelinesRunPipelineData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await pipelinesRunPipeline({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: pipelinesRunPipelineQueryKey(options),
  })
}

export const pipelinesRunPipelineMutation = (
  options?: Partial<Options<PipelinesRunPipelineData>>,
) => {
  const mutationOptions: UseMutationOptions<
    PipelinesRunPipelineResponse,
    AxiosError<PipelinesRunPipelineError>,
    Options<PipelinesRunPipelineData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await pipelinesRunPipeline({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const operatorsReadOperatorsQueryKey = (
  options?: Options<OperatorsReadOperatorsData>,
) => [createQueryKey("operatorsReadOperators", options)]

export const operatorsReadOperatorsOptions = (
  options?: Options<OperatorsReadOperatorsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await operatorsReadOperators({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: operatorsReadOperatorsQueryKey(options),
  })
}

export const agentsLaunchAgentQueryKey = (
  options: Options<AgentsLaunchAgentData>,
) => [createQueryKey("agentsLaunchAgent", options)]

export const agentsLaunchAgentOptions = (
  options: Options<AgentsLaunchAgentData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await agentsLaunchAgent({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: agentsLaunchAgentQueryKey(options),
  })
}

export const agentsLaunchAgentMutation = (
  options?: Partial<Options<AgentsLaunchAgentData>>,
) => {
  const mutationOptions: UseMutationOptions<
    unknown,
    AxiosError<AgentsLaunchAgentError>,
    Options<AgentsLaunchAgentData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await agentsLaunchAgent({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}
