// This file is auto-generated by @hey-api/openapi-ts

import {
  type Options,
  createClient,
  createConfig,
  urlSearchParamsBodySerializer,
} from "@hey-api/client-axios"
import type {
  AgentsLaunchAgentData,
  AgentsLaunchAgentError,
  LoginLoginAccessTokenData,
  LoginLoginAccessTokenError,
  LoginLoginAccessTokenResponse,
  LoginLoginWithExternalTokenData,
  LoginLoginWithExternalTokenResponse,
  LoginRecoverPasswordData,
  LoginRecoverPasswordError,
  LoginRecoverPasswordHtmlContentData,
  LoginRecoverPasswordHtmlContentError,
  LoginRecoverPasswordHtmlContentResponse,
  LoginRecoverPasswordResponse,
  LoginResetPasswordData,
  LoginResetPasswordError,
  LoginResetPasswordResponse,
  LoginTestTokenData,
  LoginTestTokenResponse,
  OperatorsReadOperatorsData,
  OperatorsReadOperatorsResponse,
  PipelinesCreatePipelineData,
  PipelinesCreatePipelineError,
  PipelinesCreatePipelineResponse,
  PipelinesDeletePipelineData,
  PipelinesDeletePipelineError,
  PipelinesDeletePipelineResponse,
  PipelinesReadPipelineData,
  PipelinesReadPipelineError,
  PipelinesReadPipelineResponse,
  PipelinesReadPipelinesData,
  PipelinesReadPipelinesError,
  PipelinesReadPipelinesResponse,
  PipelinesRunPipelineData,
  PipelinesRunPipelineError,
  PipelinesRunPipelineResponse,
  UsersCreateUserData,
  UsersCreateUserError,
  UsersCreateUserResponse,
  UsersDeleteUserData,
  UsersDeleteUserError,
  UsersDeleteUserMeData,
  UsersDeleteUserMeResponse,
  UsersDeleteUserResponse,
  UsersReadUserByIdData,
  UsersReadUserByIdError,
  UsersReadUserByIdResponse,
  UsersReadUserMeData,
  UsersReadUserMeResponse,
  UsersReadUsersData,
  UsersReadUsersError,
  UsersReadUsersResponse,
  UsersRegisterUserData,
  UsersRegisterUserError,
  UsersRegisterUserResponse,
  UsersUpdatePasswordMeData,
  UsersUpdatePasswordMeError,
  UsersUpdatePasswordMeResponse,
  UsersUpdateUserData,
  UsersUpdateUserError,
  UsersUpdateUserMeData,
  UsersUpdateUserMeError,
  UsersUpdateUserMeResponse,
  UsersUpdateUserResponse,
  UtilsTestEmailData,
  UtilsTestEmailError,
  UtilsTestEmailResponse,
} from "./types.gen"

export const client = createClient(createConfig())

/**
 * Login Access Token
 * OAuth2 compatible token login, get an access token for future requests
 */
export const loginLoginAccessToken = <ThrowOnError extends boolean = false>(
  options: Options<LoginLoginAccessTokenData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    LoginLoginAccessTokenResponse,
    LoginLoginAccessTokenError,
    ThrowOnError
  >({
    ...urlSearchParamsBodySerializer,
    url: "/api/v1/login/access-token",
    ...options,
    headers: {
      "Content-Type": "application/x-www-form-urlencoded",
      ...options?.headers,
    },
  })
}

/**
 * Login With External Token
 * Login with an external token (e.g., distiller)
 */
export const loginLoginWithExternalToken = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<LoginLoginWithExternalTokenData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    LoginLoginWithExternalTokenResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/login/external-token",
    ...options,
  })
}

/**
 * Test Token
 * Test access token
 */
export const loginTestToken = <ThrowOnError extends boolean = false>(
  options?: Options<LoginTestTokenData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    LoginTestTokenResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/login/test-token",
    ...options,
  })
}

/**
 * Recover Password
 * Password Recovery
 */
export const loginRecoverPassword = <ThrowOnError extends boolean = false>(
  options: Options<LoginRecoverPasswordData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    LoginRecoverPasswordResponse,
    LoginRecoverPasswordError,
    ThrowOnError
  >({
    url: "/api/v1/password-recovery/{email}",
    ...options,
  })
}

/**
 * Reset Password
 * Reset password
 */
export const loginResetPassword = <ThrowOnError extends boolean = false>(
  options: Options<LoginResetPasswordData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    LoginResetPasswordResponse,
    LoginResetPasswordError,
    ThrowOnError
  >({
    url: "/api/v1/reset-password/",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  })
}

/**
 * Recover Password Html Content
 * HTML Content for Password Recovery
 */
export const loginRecoverPasswordHtmlContent = <
  ThrowOnError extends boolean = false,
>(
  options: Options<LoginRecoverPasswordHtmlContentData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    LoginRecoverPasswordHtmlContentResponse,
    LoginRecoverPasswordHtmlContentError,
    ThrowOnError
  >({
    responseType: "text",
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/password-recovery-html-content/{email}",
    ...options,
  })
}

/**
 * Read Users
 * Retrieve users.
 */
export const usersReadUsers = <ThrowOnError extends boolean = false>(
  options?: Options<UsersReadUsersData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    UsersReadUsersResponse,
    UsersReadUsersError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/users/",
    ...options,
  })
}

/**
 * Create User
 * Create new user.
 */
export const usersCreateUser = <ThrowOnError extends boolean = false>(
  options: Options<UsersCreateUserData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    UsersCreateUserResponse,
    UsersCreateUserError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/users/",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  })
}

/**
 * Delete User Me
 * Delete own user.
 */
export const usersDeleteUserMe = <ThrowOnError extends boolean = false>(
  options?: Options<UsersDeleteUserMeData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    UsersDeleteUserMeResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/users/me",
    ...options,
  })
}

/**
 * Read User Me
 * Get current user.
 */
export const usersReadUserMe = <ThrowOnError extends boolean = false>(
  options?: Options<UsersReadUserMeData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    UsersReadUserMeResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/users/me",
    ...options,
  })
}

/**
 * Update User Me
 * Update own user.
 */
export const usersUpdateUserMe = <ThrowOnError extends boolean = false>(
  options: Options<UsersUpdateUserMeData, ThrowOnError>,
) => {
  return (options?.client ?? client).patch<
    UsersUpdateUserMeResponse,
    UsersUpdateUserMeError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/users/me",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  })
}

/**
 * Update Password Me
 * Update own password.
 */
export const usersUpdatePasswordMe = <ThrowOnError extends boolean = false>(
  options: Options<UsersUpdatePasswordMeData, ThrowOnError>,
) => {
  return (options?.client ?? client).patch<
    UsersUpdatePasswordMeResponse,
    UsersUpdatePasswordMeError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/users/me/password",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  })
}

/**
 * Register User
 * Create new user without the need to be logged in.
 */
export const usersRegisterUser = <ThrowOnError extends boolean = false>(
  options: Options<UsersRegisterUserData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    UsersRegisterUserResponse,
    UsersRegisterUserError,
    ThrowOnError
  >({
    url: "/api/v1/users/signup",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  })
}

/**
 * Delete User
 * Delete a user.
 */
export const usersDeleteUser = <ThrowOnError extends boolean = false>(
  options: Options<UsersDeleteUserData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    UsersDeleteUserResponse,
    UsersDeleteUserError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/users/{user_id}",
    ...options,
  })
}

/**
 * Read User By Id
 * Get a specific user by id.
 */
export const usersReadUserById = <ThrowOnError extends boolean = false>(
  options: Options<UsersReadUserByIdData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    UsersReadUserByIdResponse,
    UsersReadUserByIdError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/users/{user_id}",
    ...options,
  })
}

/**
 * Update User
 * Update a user.
 */
export const usersUpdateUser = <ThrowOnError extends boolean = false>(
  options: Options<UsersUpdateUserData, ThrowOnError>,
) => {
  return (options?.client ?? client).patch<
    UsersUpdateUserResponse,
    UsersUpdateUserError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/users/{user_id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  })
}

/**
 * Test Email
 * Test emails.
 */
export const utilsTestEmail = <ThrowOnError extends boolean = false>(
  options: Options<UtilsTestEmailData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    UtilsTestEmailResponse,
    UtilsTestEmailError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/utils/test-email/",
    ...options,
  })
}

/**
 * Read Pipelines
 * Retrieve pipelines.
 */
export const pipelinesReadPipelines = <ThrowOnError extends boolean = false>(
  options?: Options<PipelinesReadPipelinesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    PipelinesReadPipelinesResponse,
    PipelinesReadPipelinesError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/pipelines/",
    ...options,
  })
}

/**
 * Create Pipeline
 * Create new pipeline.
 */
export const pipelinesCreatePipeline = <ThrowOnError extends boolean = false>(
  options: Options<PipelinesCreatePipelineData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    PipelinesCreatePipelineResponse,
    PipelinesCreatePipelineError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/pipelines/",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  })
}

/**
 * Delete Pipeline
 * Delete an pipeline.
 */
export const pipelinesDeletePipeline = <ThrowOnError extends boolean = false>(
  options: Options<PipelinesDeletePipelineData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    PipelinesDeletePipelineResponse,
    PipelinesDeletePipelineError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/pipelines/{id}",
    ...options,
  })
}

/**
 * Read Pipeline
 * Get pipeline by ID.
 */
export const pipelinesReadPipeline = <ThrowOnError extends boolean = false>(
  options: Options<PipelinesReadPipelineData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    PipelinesReadPipelineResponse,
    PipelinesReadPipelineError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/pipelines/{id}",
    ...options,
  })
}

/**
 * Run Pipeline
 * Run a pipeline.
 */
export const pipelinesRunPipeline = <ThrowOnError extends boolean = false>(
  options: Options<PipelinesRunPipelineData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    PipelinesRunPipelineResponse,
    PipelinesRunPipelineError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/pipelines/{id}/run",
    ...options,
  })
}

/**
 * Read Operators
 * Retrieve available operators.
 */
export const operatorsReadOperators = <ThrowOnError extends boolean = false>(
  options?: Options<OperatorsReadOperatorsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    OperatorsReadOperatorsResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/operators/",
    ...options,
  })
}

/**
 * Launch Agent
 * Launch an agent remotely.
 */
export const agentsLaunchAgent = <ThrowOnError extends boolean = false>(
  options: Options<AgentsLaunchAgentData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    AgentsLaunchAgentError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/agents/launch",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  })
}
