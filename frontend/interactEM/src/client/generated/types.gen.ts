// This file is auto-generated by @hey-api/openapi-ts

export type AgentCreateEvent = {
  machine: PublicHost
  duration: string
  compute_type: ComputeType
  num_agents: number
  reservation?: string | null
}

export type BodyLoginLoginAccessToken = {
  grant_type?: string | null
  username: string
  password: string
  scope?: string
  client_id?: string | null
  client_secret?: string | null
}

export type ComputeType = "gpu" | "cpu"

export type HttpValidationError = {
  detail?: Array<ValidationError>
}

export type Message = {
  message: string
}

export type NewPassword = {
  token: string
  new_password: string
}

export type Operator = {
  id: string
  label: string
  description: string
  image: string
  inputs?: Array<OperatorInput>
  outputs?: Array<OperatorOutput> | null
  parameters?: Array<OperatorParameter> | null
}

export type OperatorInput = {
  label: string
  description: string
}

export type OperatorOutput = {
  label: string
  description: string
}

export type OperatorParameter = {
  name: string
  label: string
  description: string
  type: ParameterType
  default: string
  required: boolean
  value?: string | null
  options?: Array<string> | null
}

export type Operators = {
  data: Array<Operator>
}

export type ParameterType =
  | "str"
  | "int"
  | "float"
  | "bool"
  | "mount"
  | "str-enum"

export type PipelineCreate = {
  data: {
    [key: string]: unknown
  }
}

export type PipelinePublic = {
  data: {
    [key: string]: unknown
  }
  running?: boolean
  id: string
  owner_id: string
}

export type PipelinesPublic = {
  data: Array<PipelinePublic>
  count: number
}

export type PublicHost = "dtn01" | "dtns" | "perlmutter"

export type Token = {
  access_token: string
  token_type?: string
  nats_jwt: string
}

export type UpdatePassword = {
  current_password: string
  new_password: string
}

export type UserCreate = {
  email: string
  is_active?: boolean
  is_superuser?: boolean
  is_external?: boolean
  full_name?: string | null
  password: string
}

export type UserPublic = {
  email: string
  is_active?: boolean
  is_superuser?: boolean
  is_external?: boolean
  full_name?: string | null
  id: string
}

export type UserRegister = {
  email: string
  password: string
  full_name?: string | null
}

export type UserUpdate = {
  email?: string | null
  is_active?: boolean
  is_superuser?: boolean
  is_external?: boolean
  full_name?: string | null
  password?: string | null
}

export type UserUpdateMe = {
  full_name?: string | null
  email?: string | null
}

export type UsersPublic = {
  data: Array<UserPublic>
  count: number
}

export type ValidationError = {
  loc: Array<string | number>
  msg: string
  type: string
}

export type LoginLoginAccessTokenData = {
  body: BodyLoginLoginAccessToken
  path?: never
  query?: never
  url: "/api/v1/login/access-token"
}

export type LoginLoginAccessTokenErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type LoginLoginAccessTokenError =
  LoginLoginAccessTokenErrors[keyof LoginLoginAccessTokenErrors]

export type LoginLoginAccessTokenResponses = {
  /**
   * Successful Response
   */
  200: Token
}

export type LoginLoginAccessTokenResponse =
  LoginLoginAccessTokenResponses[keyof LoginLoginAccessTokenResponses]

export type LoginLoginWithExternalTokenData = {
  body?: never
  path?: never
  query?: never
  url: "/api/v1/login/external-token"
}

export type LoginLoginWithExternalTokenResponses = {
  /**
   * Successful Response
   */
  200: Token
}

export type LoginLoginWithExternalTokenResponse =
  LoginLoginWithExternalTokenResponses[keyof LoginLoginWithExternalTokenResponses]

export type LoginTestTokenData = {
  body?: never
  path?: never
  query?: never
  url: "/api/v1/login/test-token"
}

export type LoginTestTokenResponses = {
  /**
   * Successful Response
   */
  200: UserPublic
}

export type LoginTestTokenResponse =
  LoginTestTokenResponses[keyof LoginTestTokenResponses]

export type LoginRecoverPasswordData = {
  body?: never
  path: {
    email: string
  }
  query?: never
  url: "/api/v1/password-recovery/{email}"
}

export type LoginRecoverPasswordErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type LoginRecoverPasswordError =
  LoginRecoverPasswordErrors[keyof LoginRecoverPasswordErrors]

export type LoginRecoverPasswordResponses = {
  /**
   * Successful Response
   */
  200: Message
}

export type LoginRecoverPasswordResponse =
  LoginRecoverPasswordResponses[keyof LoginRecoverPasswordResponses]

export type LoginResetPasswordData = {
  body: NewPassword
  path?: never
  query?: never
  url: "/api/v1/reset-password/"
}

export type LoginResetPasswordErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type LoginResetPasswordError =
  LoginResetPasswordErrors[keyof LoginResetPasswordErrors]

export type LoginResetPasswordResponses = {
  /**
   * Successful Response
   */
  200: Message
}

export type LoginResetPasswordResponse =
  LoginResetPasswordResponses[keyof LoginResetPasswordResponses]

export type LoginRecoverPasswordHtmlContentData = {
  body?: never
  path: {
    email: string
  }
  query?: never
  url: "/api/v1/password-recovery-html-content/{email}"
}

export type LoginRecoverPasswordHtmlContentErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type LoginRecoverPasswordHtmlContentError =
  LoginRecoverPasswordHtmlContentErrors[keyof LoginRecoverPasswordHtmlContentErrors]

export type LoginRecoverPasswordHtmlContentResponses = {
  /**
   * Successful Response
   */
  200: string
}

export type LoginRecoverPasswordHtmlContentResponse =
  LoginRecoverPasswordHtmlContentResponses[keyof LoginRecoverPasswordHtmlContentResponses]

export type UsersReadUsersData = {
  body?: never
  path?: never
  query?: {
    skip?: number
    limit?: number
  }
  url: "/api/v1/users/"
}

export type UsersReadUsersErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type UsersReadUsersError =
  UsersReadUsersErrors[keyof UsersReadUsersErrors]

export type UsersReadUsersResponses = {
  /**
   * Successful Response
   */
  200: UsersPublic
}

export type UsersReadUsersResponse =
  UsersReadUsersResponses[keyof UsersReadUsersResponses]

export type UsersCreateUserData = {
  body: UserCreate
  path?: never
  query?: never
  url: "/api/v1/users/"
}

export type UsersCreateUserErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type UsersCreateUserError =
  UsersCreateUserErrors[keyof UsersCreateUserErrors]

export type UsersCreateUserResponses = {
  /**
   * Successful Response
   */
  200: UserPublic
}

export type UsersCreateUserResponse =
  UsersCreateUserResponses[keyof UsersCreateUserResponses]

export type UsersDeleteUserMeData = {
  body?: never
  path?: never
  query?: never
  url: "/api/v1/users/me"
}

export type UsersDeleteUserMeResponses = {
  /**
   * Successful Response
   */
  200: Message
}

export type UsersDeleteUserMeResponse =
  UsersDeleteUserMeResponses[keyof UsersDeleteUserMeResponses]

export type UsersReadUserMeData = {
  body?: never
  path?: never
  query?: never
  url: "/api/v1/users/me"
}

export type UsersReadUserMeResponses = {
  /**
   * Successful Response
   */
  200: UserPublic
}

export type UsersReadUserMeResponse =
  UsersReadUserMeResponses[keyof UsersReadUserMeResponses]

export type UsersUpdateUserMeData = {
  body: UserUpdateMe
  path?: never
  query?: never
  url: "/api/v1/users/me"
}

export type UsersUpdateUserMeErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type UsersUpdateUserMeError =
  UsersUpdateUserMeErrors[keyof UsersUpdateUserMeErrors]

export type UsersUpdateUserMeResponses = {
  /**
   * Successful Response
   */
  200: UserPublic
}

export type UsersUpdateUserMeResponse =
  UsersUpdateUserMeResponses[keyof UsersUpdateUserMeResponses]

export type UsersUpdatePasswordMeData = {
  body: UpdatePassword
  path?: never
  query?: never
  url: "/api/v1/users/me/password"
}

export type UsersUpdatePasswordMeErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type UsersUpdatePasswordMeError =
  UsersUpdatePasswordMeErrors[keyof UsersUpdatePasswordMeErrors]

export type UsersUpdatePasswordMeResponses = {
  /**
   * Successful Response
   */
  200: Message
}

export type UsersUpdatePasswordMeResponse =
  UsersUpdatePasswordMeResponses[keyof UsersUpdatePasswordMeResponses]

export type UsersRegisterUserData = {
  body: UserRegister
  path?: never
  query?: never
  url: "/api/v1/users/signup"
}

export type UsersRegisterUserErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type UsersRegisterUserError =
  UsersRegisterUserErrors[keyof UsersRegisterUserErrors]

export type UsersRegisterUserResponses = {
  /**
   * Successful Response
   */
  200: UserPublic
}

export type UsersRegisterUserResponse =
  UsersRegisterUserResponses[keyof UsersRegisterUserResponses]

export type UsersDeleteUserData = {
  body?: never
  path: {
    user_id: string
  }
  query?: never
  url: "/api/v1/users/{user_id}"
}

export type UsersDeleteUserErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type UsersDeleteUserError =
  UsersDeleteUserErrors[keyof UsersDeleteUserErrors]

export type UsersDeleteUserResponses = {
  /**
   * Successful Response
   */
  200: Message
}

export type UsersDeleteUserResponse =
  UsersDeleteUserResponses[keyof UsersDeleteUserResponses]

export type UsersReadUserByIdData = {
  body?: never
  path: {
    user_id: string
  }
  query?: never
  url: "/api/v1/users/{user_id}"
}

export type UsersReadUserByIdErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type UsersReadUserByIdError =
  UsersReadUserByIdErrors[keyof UsersReadUserByIdErrors]

export type UsersReadUserByIdResponses = {
  /**
   * Successful Response
   */
  200: UserPublic
}

export type UsersReadUserByIdResponse =
  UsersReadUserByIdResponses[keyof UsersReadUserByIdResponses]

export type UsersUpdateUserData = {
  body: UserUpdate
  path: {
    user_id: string
  }
  query?: never
  url: "/api/v1/users/{user_id}"
}

export type UsersUpdateUserErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type UsersUpdateUserError =
  UsersUpdateUserErrors[keyof UsersUpdateUserErrors]

export type UsersUpdateUserResponses = {
  /**
   * Successful Response
   */
  200: UserPublic
}

export type UsersUpdateUserResponse =
  UsersUpdateUserResponses[keyof UsersUpdateUserResponses]

export type UtilsTestEmailData = {
  body?: never
  path?: never
  query: {
    email_to: string
  }
  url: "/api/v1/utils/test-email/"
}

export type UtilsTestEmailErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type UtilsTestEmailError =
  UtilsTestEmailErrors[keyof UtilsTestEmailErrors]

export type UtilsTestEmailResponses = {
  /**
   * Successful Response
   */
  201: Message
}

export type UtilsTestEmailResponse =
  UtilsTestEmailResponses[keyof UtilsTestEmailResponses]

export type PipelinesReadPipelinesData = {
  body?: never
  path?: never
  query?: {
    skip?: number
    limit?: number
  }
  url: "/api/v1/pipelines/"
}

export type PipelinesReadPipelinesErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type PipelinesReadPipelinesError =
  PipelinesReadPipelinesErrors[keyof PipelinesReadPipelinesErrors]

export type PipelinesReadPipelinesResponses = {
  /**
   * Successful Response
   */
  200: PipelinesPublic
}

export type PipelinesReadPipelinesResponse =
  PipelinesReadPipelinesResponses[keyof PipelinesReadPipelinesResponses]

export type PipelinesCreatePipelineData = {
  body: PipelineCreate
  path?: never
  query?: never
  url: "/api/v1/pipelines/"
}

export type PipelinesCreatePipelineErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type PipelinesCreatePipelineError =
  PipelinesCreatePipelineErrors[keyof PipelinesCreatePipelineErrors]

export type PipelinesCreatePipelineResponses = {
  /**
   * Successful Response
   */
  200: PipelinePublic
}

export type PipelinesCreatePipelineResponse =
  PipelinesCreatePipelineResponses[keyof PipelinesCreatePipelineResponses]

export type PipelinesDeletePipelineData = {
  body?: never
  path: {
    id: string
  }
  query?: never
  url: "/api/v1/pipelines/{id}"
}

export type PipelinesDeletePipelineErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type PipelinesDeletePipelineError =
  PipelinesDeletePipelineErrors[keyof PipelinesDeletePipelineErrors]

export type PipelinesDeletePipelineResponses = {
  /**
   * Successful Response
   */
  200: Message
}

export type PipelinesDeletePipelineResponse =
  PipelinesDeletePipelineResponses[keyof PipelinesDeletePipelineResponses]

export type PipelinesReadPipelineData = {
  body?: never
  path: {
    id: string
  }
  query?: never
  url: "/api/v1/pipelines/{id}"
}

export type PipelinesReadPipelineErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type PipelinesReadPipelineError =
  PipelinesReadPipelineErrors[keyof PipelinesReadPipelineErrors]

export type PipelinesReadPipelineResponses = {
  /**
   * Successful Response
   */
  200: PipelinePublic
}

export type PipelinesReadPipelineResponse =
  PipelinesReadPipelineResponses[keyof PipelinesReadPipelineResponses]

export type PipelinesCreateAndRunPipelineData = {
  body: PipelineCreate
  path?: never
  query?: never
  url: "/api/v1/pipelines/run"
}

export type PipelinesCreateAndRunPipelineErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type PipelinesCreateAndRunPipelineError =
  PipelinesCreateAndRunPipelineErrors[keyof PipelinesCreateAndRunPipelineErrors]

export type PipelinesCreateAndRunPipelineResponses = {
  /**
   * Successful Response
   */
  200: PipelinePublic
}

export type PipelinesCreateAndRunPipelineResponse =
  PipelinesCreateAndRunPipelineResponses[keyof PipelinesCreateAndRunPipelineResponses]

export type PipelinesRunPipelineData = {
  body?: never
  path: {
    id: string
  }
  query?: never
  url: "/api/v1/pipelines/{id}/run"
}

export type PipelinesRunPipelineErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type PipelinesRunPipelineError =
  PipelinesRunPipelineErrors[keyof PipelinesRunPipelineErrors]

export type PipelinesRunPipelineResponses = {
  /**
   * Successful Response
   */
  200: PipelinePublic
}

export type PipelinesRunPipelineResponse =
  PipelinesRunPipelineResponses[keyof PipelinesRunPipelineResponses]

export type OperatorsReadOperatorsData = {
  body?: never
  path?: never
  query?: never
  url: "/api/v1/operators/"
}

export type OperatorsReadOperatorsResponses = {
  /**
   * Successful Response
   */
  200: Operators
}

export type OperatorsReadOperatorsResponse =
  OperatorsReadOperatorsResponses[keyof OperatorsReadOperatorsResponses]

export type AgentsLaunchAgentData = {
  body: AgentCreateEvent
  path?: never
  query?: never
  url: "/api/v1/agents/launch"
}

export type AgentsLaunchAgentErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type AgentsLaunchAgentError =
  AgentsLaunchAgentErrors[keyof AgentsLaunchAgentErrors]

export type AgentsLaunchAgentResponses = {
  /**
   * Successful Response
   */
  200: unknown
}
