import type { PipelinePublic } from "../client"
import { useMutation } from "@tanstack/react-query"
import { pipelinesCreatePipelineMutation } from "../client"

export const useCreatePipeline = (
  onCreate: (pipeline: PipelinePublic) => void,
) => {
  return useMutation({
    ...pipelinesCreatePipelineMutation(),
    onError: (error) => {
      console.error("Error creating pipeline:", error)
    },
    onSuccess: (data) => {
      console.log("Pipeline created:", data)
      onCreate(data)
      // Here we should invalidate the pipeline query to get up to date information from backend
      // Currently this is unused, keeping here for reference
      // The "queryKey" generated by hey-api is not very good, we may need to do this manually
      // NOTE: with updated generated tanstack query, I don't think we need to do all of this..

      // const queryKeyPipeline = pipelinesReadPipelineQueryKey({
      //   path: { id: data.id },
      // })
      // queryClient.invalidateQueries({
      //   queryKey: [queryKeyPipeline[0]._id],
      // })
      // const queryKeyPipelines = pipelinesReadPipelinesQueryKey()
      // queryClient.invalidateQueries({
      //   queryKey: [queryKeyPipelines[0]._id],
      // })
    },
    onSettled: () => {
      console.log("Pipeline creation complete")
    },
  })
}
