x-backend-base:
  &backend-base
    image: '${DOCKER_IMAGE_BACKEND?Variable not set}:${TAG-latest}'
    build:
      context: backend/
      args:
        INSTALL_DEV: ${INSTALL_DEV-false}
      dockerfile: ../docker/Dockerfile.fastapi
    env_file:
      - .env
    environment:
      - DOMAIN=${DOMAIN}
      - ENVIRONMENT=${ENVIRONMENT}
      - BACKEND_CORS_ORIGINS=${BACKEND_CORS_ORIGINS}
      - SECRET_KEY=${SECRET_KEY?Variable not set}
      - FIRST_SUPERUSER_USERNAME=${FIRST_SUPERUSER_USERNAME?Variable not set}
      - FIRST_SUPERUSER_PASSWORD=${FIRST_SUPERUSER_PASSWORD?Variable not set}
      - POSTGRES_SERVER=db
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER?Variable not set}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD?Variable not set}
      - SENTRY_DSN=${SENTRY_DSN}
      - NATS_CREDS_FILE=/backend.creds
      - NATS_FRONTEND_CREDS=/frontend.creds
      - NATS_SECURITY_MODE=creds
      - GITHUB_USERNAME=${GITHUB_USERNAME?Variable not set}
      - GITHUB_TOKEN=${GITHUB_TOKEN?Variable not set}
    volumes:
      - "./nats-conf/out_jwt/backend.creds:/backend.creds"
      - "./nats-conf/out_jwt/frontend.creds:/frontend.creds"
    platform: linux/amd64 # Patch for M1 Mac

services:
  nats1:
    image: nats:latest
    ports:
      - "4222:4222"
      - "8222:8222" # Monitoring port.
      - "9222:9222" # websocket
    command: >
      -c /etc/nats/nats.conf
    volumes:
      - "./nats-conf/nats1.conf:/etc/nats/nats.conf"
      - "./nats-conf/out_jwt/auth.conf:/etc/nats/auth.conf"
      - "./nats-conf/websocket.conf:/etc/nats/websocket.conf"

  nats2:
    image: nats:latest
    command: >
      -c /etc/nats/nats.conf
    volumes:
      - "./nats-conf/nats2.conf:/etc/nats/nats.conf"
      - "./nats-conf/out_jwt/auth.conf:/etc/nats/auth.conf"
      - "./nats-conf/websocket.conf:/etc/nats/websocket.conf"
    depends_on:
      - nats1

  nats3:
    image: nats:latest
    command: >
      -c /etc/nats/nats.conf
    volumes:
      - "./nats-conf/nats3.conf:/etc/nats/nats.conf"
      - "./nats-conf/out_jwt/auth.conf:/etc/nats/auth.conf"
      - "./nats-conf/websocket.conf:/etc/nats/websocket.conf"
    depends_on:
      - nats2


  # Checks for health of nats server before allowing others to start up
  nats-healthcheck:
    image: curlimages/curl
    command: > # better command than sleep infinity because it exits more quickly
      /bin/sh -c "trap 'exit' TERM; while true; do sleep 1; done"
    depends_on:
      nats1:
        condition: service_started
      nats2:
        condition: service_started
      nats3:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "--connect-timeout", "3", "http://nats1:8222/healthz?js-enabled-only=true"]
      start_period: "3s"
      interval: "14s"
      timeout: "3s"
      retries: "3"

    
  db:
    image: postgres:12
    restart: always
    volumes:
      - app-db-data:/var/lib/postgresql/data/pgdata
    env_file:
      - .env
    environment:
      - PGDATA=/var/lib/postgresql/data/pgdata
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD?Variable not set}
      - POSTGRES_USER=${POSTGRES_USER?Variable not set}
      - POSTGRES_DB=${POSTGRES_DB?Variable not set}

  prestart:
    <<: *backend-base
    depends_on:
      db:
        condition: service_started
    command: bash prestart.sh

  backend:
    <<: *backend-base
    restart: always
    depends_on:
      db:
        condition: service_started
      nats-healthcheck:
        condition: service_healthy
      prestart:
        condition: service_completed_successfully
    ports:
      - "8080:8000"

  orchestrator:
    image: '${DOCKER_IMAGE_ORCHESTRATOR?Variable not set}:${TAG-latest}'
    restart: always
    depends_on:
      db:
        condition: service_started
      nats-healthcheck:
        condition: service_healthy
      backend:
        condition: service_started
    env_file:
      - .env
    environment:
      - NATS_CREDS_FILE=/backend.creds
      - NATS_SECURITY_MODE=creds
    volumes:
      - "./nats-conf/out_jwt/backend.creds:/backend.creds"

    build:
      context: backend/
      dockerfile: ../docker/Dockerfile.orchestrator


  callout:
    image: '${DOCKER_IMAGE_CALLOUT?Variable not set}:${TAG-latest}'
    restart: always
    depends_on:
      db:
        condition: service_started
      nats-healthcheck:
        condition: service_healthy
    env_file:
      - .env
    volumes:
      - "./backend/callout/service/.env:/.env"
      - "./nats-conf/out_jwt/:/nats-conf/"
    build: 
      context: backend/
      dockerfile: ../docker/Dockerfile.callout


  launcher:
    image: '${DOCKER_IMAGE_LAUNCHER?Variable not set}:${TAG-latest}'
    restart: always
    depends_on:
      nats-healthcheck:
        condition: service_healthy
    env_file:
      - backend/launcher/.env
    environment:
      - NATS_CREDS_FILE=/backend.creds
      - NATS_SECURITY_MODE=creds
      - SFAPI_KEY_PATH=/key.pem
      - NATS_SERVER_URL=nats://nats1:4222
    volumes:
      - "./nats-conf/out_jwt/backend.creds:/backend.creds"
      - "${HOME}/.superfacility/key.pem:/key.pem"
    build: 
      context: backend/
      dockerfile: ../docker/Dockerfile.launcher

  metrics:
    image: '${DOCKER_IMAGE_METRICS?Variable not set}:${TAG-latest}'
    ports:
    - "8001:8001"
    restart: always
    depends_on:
      db:
        condition: service_started
      nats-healthcheck:
        condition: service_healthy
      backend:
        condition: service_started
    env_file:
      - .env
    environment:
      - NATS_CREDS_FILE=/backend.creds
      - NATS_SECURITY_MODE=creds
    volumes:
      - "./nats-conf/out_jwt/backend.creds:/backend.creds"

    build:
      context: backend/
      dockerfile: ../docker/Dockerfile.metrics

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./backend/metrics/monitoring-conf/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=240h'
      - '--web.enable-lifecycle'

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./backend/metrics/monitoring-conf/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./backend/metrics/monitoring-conf/grafana/dashboards:/var/lib/grafana/dashboards:ro
  
volumes:
  app-db-data:
  prometheus_data:
  grafana_data: