[project]
name = "launcher"
description = ""
dynamic = ["version", "dependencies"]
authors = [
    {name = "Sam Welborn", email = "swelborn@lbl.gov"},
    {name = "Chris Harris", email = "cjh@lbl.gov"}
]
requires-python = ">=3.12"
readme = "README.md"

[tool.poetry]
packages = [{ include = "interactem" }]
version = "0.1.0"

[tool.poetry.dependencies]
python = "^3.12"
interactem-core = {path = "../../core", develop = true}
interactem-sfapi-models = {path = "../../sfapi_models", develop = true}
pydantic-settings = "^2.4.0"
sfapi-client = "^0.3.2"
jinja2 = "^3.1.5"

[tool.poetry.group.dev.dependencies]
pytest = "^8.3.4"
pytest-asyncio = "^0.25.3"
python-dotenv = { version = "^1.0.1", extras = ["cli"] }

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
target-version = "py312"

[tool.ruff.lint]
exclude = ["**/__init__.py", "thirdparty/**", "conftest.py"]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501", # line too long, handled by black
    "B008", # do not perform function calls in argument defaults
    "W191", # indentation contains tabs
    "B904", # Allow raising exceptions without from e, for HTTPException
]

isort = { known-first-party = ["interactem"] }

[tool.ruff.lint.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true
